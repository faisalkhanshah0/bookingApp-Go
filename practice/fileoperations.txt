📚 Go File Read & Write Functions – Usage

Import:

import (
    "os"
    "fmt"
    "io"
    "bufio"
)

📝 Writing to Files
1. Create & Write String
f, err := os.Create("file.txt") // creates or truncates
if err != nil { panic(err) }
defer f.Close()

f.WriteString("Hello, Go!\n")

2. Append to File
f, err := os.OpenFile("file.txt", os.O_APPEND|os.O_WRONLY, 0644)
if err != nil { panic(err) }
defer f.Close()

f.WriteString("Appended line\n")

3. Write with Buffer (efficient)
f, _ := os.Create("buffered.txt")
defer f.Close()

w := bufio.NewWriter(f)
w.WriteString("Hello buffered write!\n")
w.Flush()

4. Write Whole Bytes (shortcut)
data := []byte("Quick write\n")
os.WriteFile("quick.txt", data, 0644) // creates or overwrites

📖 Reading from Files
1. Read Whole File
data, err := os.ReadFile("file.txt")
if err != nil { panic(err) }
fmt.Println(string(data))

2. Read File Line by Line
f, _ := os.Open("file.txt")
defer f.Close()

scanner := bufio.NewScanner(f)
for scanner.Scan() {
    fmt.Println(scanner.Text())
}

3. Read Fixed Number of Bytes
f, _ := os.Open("file.txt")
defer f.Close()

buf := make([]byte, 5)
n, _ := f.Read(buf)
fmt.Println(string(buf[:n]))

4. Read with io.Copy (streaming)
f, _ := os.Open("file.txt")
defer f.Close()

io.Copy(os.Stdout, f) // prints file to stdout

5. Read at Specific Offset
f, _ := os.Open("file.txt")
defer f.Close()

buf := make([]byte, 6)
f.ReadAt(buf, 3) // read from byte 3
fmt.Println(string(buf))

🔧 Other File Operations
os.Remove("file.txt")              // delete file
os.Rename("old.txt", "new.txt")    // rename file

info, _ := os.Stat("quick.txt")    // file info
fmt.Println(info.Name(), info.Size(), info.Mode())

✅ Summary
Writing

os.Create → create/truncate file

f.WriteString / f.Write → write text or bytes

bufio.NewWriter + Flush() → buffered writes

os.WriteFile → quick write whole file

Reading

os.ReadFile → quick read whole file

bufio.Scanner → read line by line

f.Read → read fixed bytes

f.ReadAt → read from offset

io.Copy → stream file to another writer